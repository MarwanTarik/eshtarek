# Generated by Django 5.2.4 on 2025-08-04 09:40

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('role', models.CharField(choices=[('tenant_admin', 'Tenant Admin'), ('tenant_user', 'Tenant User'), ('platform_admin', 'Platform Admin')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LimitPolicies',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric', models.CharField(choices=[('max_users', 'Max Users')], max_length=50)),
                ('limit', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_limit_policies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Limit Policy',
                'verbose_name_plural': 'Limit Policies',
                'db_table': 'limit_policies',
            },
        ),
        migrations.CreateModel(
            name='Plans',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('billing_cycle', models.CharField(choices=[('monthly', 'Monthly'), ('annually', 'Annually')], max_length=20)),
                ('billing_duration', models.PositiveIntegerField(help_text='Duration in months for monthly plans or years for yearly plans')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Plan',
                'verbose_name_plural': 'Plans',
                'db_table': 'plans',
            },
        ),
        migrations.CreateModel(
            name='PlansLimitPolicies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('limit_policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='limit_policy_plans', to='api.limitpolicies')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_limit_policies', to='api.plans')),
            ],
            options={
                'verbose_name': 'Plan Limit Policy',
                'verbose_name_plural': 'Plan Limit Policies',
                'db_table': 'plans_limit_policies',
            },
        ),
        migrations.CreateModel(
            name='Tenants',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
                'db_table': 'tenants',
                'constraints': [models.UniqueConstraint(fields=('name',), name='unique_tenant_name_constraint')],
            },
        ),
        migrations.CreateModel(
            name='Subscriptions',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('suspended', 'Suspended'), ('trial', 'Trial'), ('paused', 'Paused'), ('renewal', 'Renewal'), ('failed', 'Failed')], max_length=50)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_subscriptions', to=settings.AUTH_USER_MODEL)),
                ('plan_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_subscriptions', to='api.plans')),
                ('tenant_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_subscriptions', to='api.tenants')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
                'db_table': 'subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Usages',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric', models.CharField(choices=[('max_users', 'Max Users')], max_length=50)),
                ('value', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_usages', to='api.subscriptions')),
            ],
            options={
                'verbose_name': 'Usage',
                'verbose_name_plural': 'Usages',
                'db_table': 'usages',
            },
        ),
        migrations.CreateModel(
            name='UserTenants',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_users', to='api.tenants')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_tenants', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Tenant',
                'verbose_name_plural': 'User Tenants',
                'db_table': 'user_tenants',
            },
        ),
        migrations.AddIndex(
            model_name='users',
            index=models.Index(fields=['email'], name='email_index'),
        ),
        migrations.AddIndex(
            model_name='users',
            index=models.Index(fields=['role'], name='role_index'),
        ),
        migrations.AddConstraint(
            model_name='users',
            constraint=models.UniqueConstraint(fields=('email',), name='unique_email_constraint'),
        ),
        migrations.AddIndex(
            model_name='limitpolicies',
            index=models.Index(fields=['metric'], name='metric_index'),
        ),
        migrations.AddConstraint(
            model_name='limitpolicies',
            constraint=models.UniqueConstraint(fields=('metric',), name='unique_limit_policy_metric_constraint'),
        ),
        migrations.AddConstraint(
            model_name='plans',
            constraint=models.UniqueConstraint(fields=('name',), name='unique_plan_name_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='planslimitpolicies',
            unique_together={('plan', 'limit_policy')},
        ),
        migrations.AddIndex(
            model_name='subscriptions',
            index=models.Index(fields=['status'], name='status_index'),
        ),
        migrations.AddIndex(
            model_name='subscriptions',
            index=models.Index(fields=['created_by_user_id'], name='created_by_user_index'),
        ),
        migrations.AddIndex(
            model_name='subscriptions',
            index=models.Index(fields=['plan_id'], name='plan_index'),
        ),
        migrations.AddIndex(
            model_name='subscriptions',
            index=models.Index(fields=['tenant_id'], name='tenant_index'),
        ),
        migrations.AddConstraint(
            model_name='subscriptions',
            constraint=models.UniqueConstraint(fields=('created_by_user_id', 'plan_id', 'tenant_id'), name='unique_subscription_constraint'),
        ),
        migrations.AddIndex(
            model_name='usages',
            index=models.Index(fields=['metric'], name='usage_metric_index'),
        ),
        migrations.AddIndex(
            model_name='usages',
            index=models.Index(fields=['subscription_id'], name='usage_subscription_index'),
        ),
        migrations.AddConstraint(
            model_name='usages',
            constraint=models.UniqueConstraint(fields=('subscription_id', 'metric'), name='unique_usage_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='usertenants',
            unique_together={('user', 'tenant')},
        ),
    ]
