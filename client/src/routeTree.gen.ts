/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsagesRouteImport } from './routes/usages'
import { Route as SubscriptionsRouteImport } from './routes/subscriptions'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as PlansRouteImport } from './routes/plans'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminDashboardRouteImport } from './routes/admin-dashboard'
import { Route as IndexRouteImport } from './routes/index'

const UsagesRoute = UsagesRouteImport.update({
  id: '/usages',
  path: '/usages',
  getParentRoute: () => rootRouteImport,
} as any)
const SubscriptionsRoute = SubscriptionsRouteImport.update({
  id: '/subscriptions',
  path: '/subscriptions',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const PlansRoute = PlansRouteImport.update({
  id: '/plans',
  path: '/plans',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/admin-dashboard',
  path: '/admin-dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin-dashboard': typeof AdminDashboardRoute
  '/login': typeof LoginRoute
  '/plans': typeof PlansRoute
  '/signup': typeof SignupRoute
  '/subscriptions': typeof SubscriptionsRoute
  '/usages': typeof UsagesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin-dashboard': typeof AdminDashboardRoute
  '/login': typeof LoginRoute
  '/plans': typeof PlansRoute
  '/signup': typeof SignupRoute
  '/subscriptions': typeof SubscriptionsRoute
  '/usages': typeof UsagesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin-dashboard': typeof AdminDashboardRoute
  '/login': typeof LoginRoute
  '/plans': typeof PlansRoute
  '/signup': typeof SignupRoute
  '/subscriptions': typeof SubscriptionsRoute
  '/usages': typeof UsagesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin-dashboard'
    | '/login'
    | '/plans'
    | '/signup'
    | '/subscriptions'
    | '/usages'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin-dashboard'
    | '/login'
    | '/plans'
    | '/signup'
    | '/subscriptions'
    | '/usages'
  id:
    | '__root__'
    | '/'
    | '/admin-dashboard'
    | '/login'
    | '/plans'
    | '/signup'
    | '/subscriptions'
    | '/usages'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  LoginRoute: typeof LoginRoute
  PlansRoute: typeof PlansRoute
  SignupRoute: typeof SignupRoute
  SubscriptionsRoute: typeof SubscriptionsRoute
  UsagesRoute: typeof UsagesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/usages': {
      id: '/usages'
      path: '/usages'
      fullPath: '/usages'
      preLoaderRoute: typeof UsagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/subscriptions': {
      id: '/subscriptions'
      path: '/subscriptions'
      fullPath: '/subscriptions'
      preLoaderRoute: typeof SubscriptionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plans': {
      id: '/plans'
      path: '/plans'
      fullPath: '/plans'
      preLoaderRoute: typeof PlansRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin-dashboard': {
      id: '/admin-dashboard'
      path: '/admin-dashboard'
      fullPath: '/admin-dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  LoginRoute: LoginRoute,
  PlansRoute: PlansRoute,
  SignupRoute: SignupRoute,
  SubscriptionsRoute: SubscriptionsRoute,
  UsagesRoute: UsagesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
